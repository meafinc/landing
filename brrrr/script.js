const sampleLogs = [
  "request: POST /chat/completions 127.0.0.1 200",
  "slot launch_slot_: id  0 | task 1307 | processing task",
  "slot update_slots: id  0 | task 1307 | new prompt, n_ctx_slot = 4096, n_keep = 0, n_prompt_tokens = 2024",
  "slot update_slots: id  0 | task 1307 | kv cache rm [3, end)",
  "slot update_slots: id  0 | task 1307 | prompt processing progress, n_past = 2024, n_tokens = 2021, progress = 0.998518",
  "slot update_slots: id  0 | task 1307 | prompt done, n_past = 2024, n_tokens = 2021",
  "slot      release: id  0 | task 1307 | stop processing: n_past = 2032, truncated = 0",
  "slot print_timing: id  0 | task 1307 | ",
  "prompt eval time =   27281.80 ms /  2021 tokens (   13.50 ms per token,    74.08 tokens per second)",
  "       eval time =     867.70 ms /     9 tokens (   96.41 ms per token,    10.37 tokens per second)",
  "      total time =   28149.50 ms /  2030 tokens",
  "srv  update_slots: all slots are idle",
  "request: POST /chat/completions 127.0.0.1 200",
  "slot launch_slot_: id  0 | task 1317 | processing task",
  "slot update_slots: id  0 | task 1317 | new prompt, n_ctx_slot = 4096, n_keep = 0, n_prompt_tokens = 1509",
  "slot update_slots: id  0 | task 1317 | kv cache rm [3, end)",
  "slot update_slots: id  0 | task 1317 | prompt processing progress, n_past = 1509, n_tokens = 1506, progress = 0.998012",
  "slot update_slots: id  0 | task 1317 | prompt done, n_past = 1509, n_tokens = 1506",
  "slot      release: id  0 | task 1317 | stop processing: n_past = 1654, truncated = 0",
  "slot print_timing: id  0 | task 1317 | ",
  "prompt eval time =   20356.26 ms /  1506 tokens (   13.52 ms per token,    73.98 tokens per second)",
  "       eval time =   16104.18 ms /   146 tokens (  110.30 ms per token,     9.07 tokens per second)",
  "      total time =   36460.44 ms /  1652 tokens",
  "srv  update_slots: all slots are idle",
  "request: POST /chat/completions 127.0.0.1 200",
  "slot launch_slot_: id  0 | task 1464 | processing task",
  "slot update_slots: id  0 | task 1464 | new prompt, n_ctx_slot = 4096, n_keep = 0, n_prompt_tokens = 4051",
  "slot update_slots: id  0 | task 1464 | kv cache rm [3, end)",
  "slot update_slots: id  0 | task 1464 | prompt processing progress, n_past = 2051, n_tokens = 2048, progress = 0.505554",
  "slot update_slots: id  0 | task 1464 | kv cache rm [2051, end)",
  "slot update_slots: id  0 | task 1464 | prompt processing progress, n_past = 4051, n_tokens = 2000, progress = 0.999259",
  "slot update_slots: id  0 | task 1464 | prompt done, n_past = 4051, n_tokens = 2000",
  "slot update_slots: id  0 | task 1464 | slot context shift, n_keep = 0, n_left = 4095, n_discard = 2047",
  "slot      release: id  0 | task 1464 | stop processing: n_past = 2629, truncated = 1",
  "slot print_timing: id  0 | task 1464 | ",
  "prompt eval time =   55173.22 ms /  4048 tokens (   13.63 ms per token,    73.37 tokens per second)",
  "       eval time =   75020.33 ms /   626 tokens (  119.84 ms per token,     8.34 tokens per second)",
  "      total time =  130193.55 ms /  4674 tokens",
  "srv  update_slots: all slots are idle",
  "llama_model_loader: loaded meta data with 37 key-value pairs and 579 tensors from Rombos-Coder-V2.5-Qwen-14b-Q4_K_S.gguf (version GGUF V3 (latest))",
  "llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.",
  "llama_model_loader: - kv   0:                       general.architecture str              = qwen2",
  "llama_model_loader: - kv   1:                               general.type str              = model",
  "llama_model_loader: - kv   2:                               general.name str              = Rombos Coder V2.5 Qwen 14b",
  "llama_model_loader: - kv   3:                           general.basename str              = Rombos-Coder-V2.5-Qwen",
  "llama_model_loader: - kv   4:                         general.size_label str              = 14B",
  "llama_model_loader: - kv   5:                            general.license str              = apache-2.0",
  "llama_model_loader: - kv   6:                       general.license.link str              = https://huggingface.co/Qwen/Qwen2.5-C...",
  "llama_model_loader: - kv   7:                   general.base_model.count u32              = 1",
  "llama_model_loader: - kv   8:                  general.base_model.0.name str              = Qwen2.5 Coder 14B Instruct",
  "llama_model_loader: - kv   9:          general.base_model.0.organization str              = Qwen",
  "llama_model_loader: - kv  10:              general.base_model.0.repo_url str              = https://huggingface.co/Qwen/Qwen2.5-C...",
  'llama_model_loader: - kv  11:                               general.tags arr[str,5]       = ["code", "qwen", "qwen-coder", "codeq...',
  'llama_model_loader: - kv  12:                          general.languages arr[str,1]       = ["en"]',
  "llama_model_loader: - kv  13:                          qwen2.block_count u32              = 48",
  "llama_model_loader: - kv  14:                       qwen2.context_length u32              = 32768",
  "llama_model_loader: - kv  15:                     qwen2.embedding_length u32              = 5120",
  "llama_model_loader: - kv  16:                  qwen2.feed_forward_length u32              = 13824",
  "llama_model_loader: - kv  17:                 qwen2.attention.head_count u32              = 40",
  "llama_model_loader: - kv  18:              qwen2.attention.head_count_kv u32              = 8",
  "llama_model_loader: - kv  19:                       qwen2.rope.freq_base f32              = 1000000.000000",
  "llama_model_loader: - kv  20:     qwen2.attention.layer_norm_rms_epsilon f32              = 0.000010",
  "llama_model_loader: - kv  21:                          general.file_type u32              = 14",
  "llama_model_loader: - kv  22:                       tokenizer.ggml.model str              = gpt2",
  "llama_model_loader: - kv  23:                         tokenizer.ggml.pre str              = qwen2",
  'llama_model_loader: - kv  24:                      tokenizer.ggml.tokens arr[str,152064]  = ["!", """, "#", "$", "%", "&", "\'", ...',
  "llama_model_loader: - kv  25:                  tokenizer.ggml.token_type arr[i32,152064]  = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...",
  'llama_model_loader: - kv  26:                      tokenizer.ggml.merges arr[str,151387]  = ["Ġ Ġ", "ĠĠ ĠĠ", "i n", "Ġ t",...',
  "llama_model_loader: - kv  27:                tokenizer.ggml.eos_token_id u32              = 151645",
  "llama_model_loader: - kv  28:            tokenizer.ggml.padding_token_id u32              = 151643",
  "llama_model_loader: - kv  29:                tokenizer.ggml.bos_token_id u32              = 151643",
  "llama_model_loader: - kv  30:               tokenizer.ggml.add_bos_token bool             = false",
  "llama_model_loader: - kv  31:                    tokenizer.chat_template str              = {%- if tools %}",
  "    {{- '<|im_start|>...",
  "llama_model_loader: - kv  32:               general.quantization_version u32              = 2",
  "llama_model_loader: - kv  33:                      quantize.imatrix.file str              = /models_out/Rombos-Coder-V2.5-Qwen-14...",
  "llama_model_loader: - kv  34:                   quantize.imatrix.dataset str              = /training_dir/calibration_datav3.txt",
  "llama_model_loader: - kv  35:             quantize.imatrix.entries_count i32              = 336",
  "llama_model_loader: - kv  36:              quantize.imatrix.chunks_count i32              = 128",
  "llama_model_loader: - type  f32:  241 tensors",
  "llama_model_loader: - type q4_K:  327 tensors",
  "llama_model_loader: - type q5_K:   10 tensors",
  "llama_model_loader: - type q6_K:    1 tensors",
  "print_info: file format = GGUF V3 (latest)",
  "print_info: file type   = Q4_K - Small",
  "print_info: file size   = 7.98 GiB (4.64 BPW) ",
  "load: special tokens cache size = 22",
  "load: token to piece cache size = 0.9310 MB",
  "print_info: arch             = qwen2",
  "print_info: vocab_only       = 0",
  "print_info: n_ctx_train      = 32768",
  "print_info: n_embd           = 5120",
  "print_info: n_layer          = 48",
  "print_info: n_head           = 40",
  "print_info: n_head_kv        = 8",
  "print_info: n_rot            = 128",
  "print_info: n_swa            = 0",
  "print_info: n_embd_head_k    = 128",
  "print_info: n_embd_head_v    = 128",
  "print_info: n_gqa            = 5",
  "print_info: n_embd_k_gqa     = 1024",
  "print_info: n_embd_v_gqa     = 1024",
  "print_info: f_norm_eps       = 0.0e+00",
  "print_info: f_norm_rms_eps   = 1.0e-05",
  "print_info: f_clamp_kqv      = 0.0e+00",
  "print_info: f_max_alibi_bias = 0.0e+00",
  "print_info: f_logit_scale    = 0.0e+00",
  "print_info: n_ff             = 13824",
  "print_info: n_expert         = 0",
  "print_info: n_expert_used    = 0",
  "print_info: causal attn      = 1",
  "print_info: pooling type     = 0",
  "print_info: rope type        = 2",
  "print_info: rope scaling     = linear",
  "print_info: freq_base_train  = 1000000.0",
  "print_info: freq_scale_train = 1",
  "print_info: n_ctx_orig_yarn  = 32768",
  "print_info: rope_finetuned   = unknown",
  "print_info: ssm_d_conv       = 0",
  "print_info: ssm_d_inner      = 0",
  "print_info: ssm_d_state      = 0",
  "print_info: ssm_dt_rank      = 0",
  "print_info: ssm_dt_b_c_rms   = 0",
  "print_info: model type       = 14B",
  "print_info: model params     = 14.77 B",
  "print_info: general.name     = Rombos Coder V2.5 Qwen 14b",
  "print_info: vocab type       = BPE",
  "print_info: n_vocab          = 152064",
  "print_info: n_merges         = 151387",
  "print_info: BOS token        = 151643 '<|endoftext|>'",
  "print_info: EOS token        = 151645 '<|im_end|>'",
  "print_info: EOT token        = 151645 '<|im_end|>'",
  "print_info: PAD token        = 151643 '<|endoftext|>'",
  "print_info: LF token         = 198 'Ċ'",
  "print_info: FIM PRE token    = 151659 '<|fim_prefix|>'",
  "print_info: FIM SUF token    = 151661 '<|fim_suffix|>'",
  "print_info: FIM MID token    = 151660 '<|fim_middle|>'",
  "print_info: FIM PAD token    = 151662 '<|fim_pad|>'",
  "print_info: FIM REP token    = 151663 '<|repo_name|>'",
  "print_info: FIM SEP token    = 151664 '<|file_sep|>'",
  "print_info: EOG token        = 151643 '<|endoftext|>'",
  "print_info: EOG token        = 151645 '<|im_end|>'",
  "print_info: EOG token        = 151662 '<|fim_pad|>'",
  "print_info: EOG token        = 151663 '<|repo_name|>'",
  "print_info: EOG token        = 151664 '<|file_sep|>'",
  "print_info: max token length = 256",
  "load_tensors: offloading 48 repeating layers to GPU",
  "load_tensors: offloading output layer to GPU",
  "load_tensors: offloaded 49/49 layers to GPU",
  "load_tensors: Metal_Mapped model buffer size =  8170.57 MiB",
  "load_tensors:   CPU_Mapped model buffer size =   417.66 MiB",
  "llama_init_from_model: n_seq_max     = 1",
  "llama_init_from_model: n_ctx         = 4096",
  "llama_init_from_model: n_ctx_per_seq = 4096",
  "llama_init_from_model: n_batch       = 2048",
  "llama_init_from_model: n_ubatch      = 512",
  "llama_init_from_model: flash_attn    = 0",
  "llama_init_from_model: freq_base     = 1000000.0",
  "llama_init_from_model: freq_scale    = 1",
  "llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (32768) -- the full capacity of the model will not be utilized",
  "ggml_metal_init: allocating",
  "ggml_metal_init: found device: Apple M1 Pro",
  "ggml_metal_init: picking default device: Apple M1 Pro",
  "ggml_metal_init: using embedded metal library",
  "ggml_metal_init: GPU name:   Apple M1 Pro",
  "ggml_metal_init: GPU family: MTLGPUFamilyApple7  (1007)",
  "ggml_metal_init: GPU family: MTLGPUFamilyCommon3 (3003)",
  "ggml_metal_init: GPU family: MTLGPUFamilyMetal3  (5001)",
  "ggml_metal_init: simdgroup reduction   = true",
  "ggml_metal_init: simdgroup matrix mul. = true",
  "ggml_metal_init: has residency sets    = true",
  "ggml_metal_init: has bfloat            = true",
  "ggml_metal_init: use bfloat            = false",
  "ggml_metal_init: hasUnifiedMemory      = true",
  "ggml_metal_init: recommendedMaxWorkingSetSize  = 11453.25 MB",
  "ggml_metal_init: skipping kernel_get_rows_bf16                     (not supported)",
  "ggml_metal_init: skipping kernel_mul_mv_bf16_f32                   (not supported)",
  "ggml_metal_init: skipping kernel_mul_mv_bf16_f32_1row              (not supported)",
  "ggml_metal_init: skipping kernel_mul_mv_bf16_f32_l4                (not supported)",
  "ggml_metal_init: skipping kernel_mul_mv_bf16_bf16                  (not supported)",
  "ggml_metal_init: skipping kernel_mul_mv_id_bf16_f32                (not supported)",
  "ggml_metal_init: skipping kernel_mul_mm_bf16_f32                   (not supported)",
  "ggml_metal_init: skipping kernel_mul_mm_id_bf16_f32                (not supported)",
  "ggml_metal_init: skipping kernel_flash_attn_ext_bf16_h64           (not supported)",
  "ggml_metal_init: skipping kernel_flash_attn_ext_bf16_h80           (not supported)",
  "ggml_metal_init: skipping kernel_flash_attn_ext_bf16_h96           (not supported)",
  "ggml_metal_init: skipping kernel_flash_attn_ext_bf16_h112          (not supported)",
  "ggml_metal_init: skipping kernel_flash_attn_ext_bf16_h128          (not supported)",
  "ggml_metal_init: skipping kernel_flash_attn_ext_bf16_h256          (not supported)",
  "ggml_metal_init: skipping kernel_flash_attn_ext_vec_bf16_h128      (not supported)",
  "ggml_metal_init: skipping kernel_flash_attn_ext_vec_bf16_h256      (not supported)",
  "ggml_metal_init: skipping kernel_cpy_f32_bf16                      (not supported)",
  "ggml_metal_init: skipping kernel_cpy_bf16_f32                      (not supported)",
  "ggml_metal_init: skipping kernel_cpy_bf16_bf16                     (not supported)",
  "llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 48, can_shift = 1",
  "llama_kv_cache_init:      Metal KV buffer size =   768.00 MiB",
  "llama_init_from_model: KV self size  =  768.00 MiB, K (f16):  384.00 MiB, V (f16):  384.00 MiB",
  "llama_init_from_model:        CPU  output buffer size =     0.58 MiB",
  "llama_init_from_model:      Metal compute buffer size =   368.00 MiB",
  "llama_init_from_model:        CPU compute buffer size =    18.01 MiB",
  "llama_init_from_model: graph nodes  = 1686",
  "llama_init_from_model: graph splits = 2",
  "common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096",
  "common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)",
  "srv          init: initializing slots, n_slots = 1",
  "slot         init: id  0 | task -1 | new slot n_ctx_slot = 4096",
  "main: model loaded",
  "main: chat template, chat_template: {%- if tools %}",
  "    {{- '<|im_start|>system",
  "' }}",
  "    {%- if messages[0]['role'] == 'system' %}",
  "        {{- messages[0]['content'] }}",
  "    {%- else %}",
  "        {{- 'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.' }}",
  "    {%- endif %}",
  '    {{- "',
  "",
  "# Tools",
  "",
  "You may call one or more functions to assist with the user query.",
  "",
  "You are provided with function signatures within <tools></tools> XML tags:",
  '<tools>" }}',
  "    {%- for tool in tools %}",
  '        {{- "',
  '" }}',
  "        {{- tool | tojson }}",
  "    {%- endfor %}",
  '    {{- "',
  "</tools>",
  "",
  "For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:",
  "<tool_call>",
  '{"name": <function-name>, "arguments": <args-json-object>}',
  "</tool_call><|im_end|>",
  '" }}',
  "{%- else %}",
  "    {%- if messages[0]['role'] == 'system' %}",
  "        {{- '<|im_start|>system",
  "' + messages[0]['content'] + '<|im_end|>",
  "' }}",
  "    {%- else %}",
  "        {{- '<|im_start|>system",
  "You are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>",
  "' }}",
  "    {%- endif %}",
  "{%- endif %}",
  "{%- for message in messages %}",
  '    {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}',
  "        {{- '<|im_start|>' + message.role + '",
  "' + message.content + '<|im_end|>' + '",
  "' }}",
  '    {%- elif message.role == "assistant" %}',
  "        {{- '<|im_start|>' + message.role }}",
  "        {%- if message.content %}",
  "            {{- '",
  "' + message.content }}",
  "        {%- endif %}",
  "        {%- for tool_call in message.tool_calls %}",
  "            {%- if tool_call.function is defined %}",
  "                {%- set tool_call = tool_call.function %}",
  "            {%- endif %}",
  "            {{- '",
  "<tool_call>",
  '{"name": "\' }}',
  "            {{- tool_call.name }}",
  '            {{- \'", "arguments": \' }}',
  "            {{- tool_call.arguments | tojson }}",
  "            {{- '}",
  "</tool_call>' }}",
  "        {%- endfor %}",
  "        {{- '<|im_end|>",
  "' }}",
  '    {%- elif message.role == "tool" %}',
  '        {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}',
  "            {{- '<|im_start|>user' }}",
  "        {%- endif %}",
  "        {{- '",
  "<tool_response>",
  "' }}",
  "        {{- message.content }}",
  "        {{- '",
  "</tool_response>' }}",
  '        {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}',
  "            {{- '<|im_end|>",
  "' }}",
  "        {%- endif %}",
  "    {%- endif %}",
  "{%- endfor %}",
  "{%- if add_generation_prompt %}",
  "    {{- '<|im_start|>assistant",
  "' }}",
  "{%- endif %}",
  ", example_format: '<|im_start|>system",
  "You are a helpful assistant<|im_end|>",
  "<|im_start|>user",
  "Hello<|im_end|>",
  "<|im_start|>assistant",
  "Hi there<|im_end|>",
  "<|im_start|>user",
  "How are you?<|im_end|>",
  "<|im_start|>assistant",
  "",
];


function renderLogs() {
  const contentDivs = document.querySelectorAll(".content");
  let scrollText = "";

  // Calculate how many lines will fill the viewport
  const lineHeight = 20; // Approximate line height in pixels
  const viewportHeight = window.innerHeight;
  const linesNeeded = Math.ceil(viewportHeight / lineHeight);
  console.log("linesNeeded", linesNeeded);
  // Generate content that fills the viewport
  for (let i = 0; i < linesNeeded; i++) {
    const timestamp = new Date().toISOString();
    const log = sampleLogs[Math.floor(Math.random() * sampleLogs.length)];
    scrollText += `${timestamp} ${log}\n`;
  }
  contentDivs.forEach((div) => {
    div.textContent = scrollText;
  });
}

// Reset animation when it completes
document.querySelectorAll(".content-container").forEach((container) => {
  container.addEventListener("animationend", () => {
    container.style.animation = "none";
    container.offsetHeight; // Trigger reflow
    // container.style.animation = "slideDown 1s linear infinite";
  });
});

(async function() {
  const init = () => {
    setInterval(renderLogs, 200);
  };
  init();
})();